<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- DataSource란, JDBC 명세의 일부분이면서 일반화된 연결 팩토리입니다. 
	즉 DB와 관련된 connection 정보를 담고 있으며, bean으로 등록하여 인자로 넘겨줍니다. 
	이과정을 통해서 Spring은 DataSource로 DB와의 연결을 획득합니다. -->
	
	<!-- 프로퍼티 파일의 위치를 지정합니다. -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
			<!-- jdbc.properties 파일에서 데이터베이스와 연결에 필요한 4가지 설정정보를 가져옵니다. -->
				<value>/WEB-INF/config/jdbc.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- jdbc.properties에 있는 4가지 설정 정보로 Spring의 
	SimpleDriverDataSource 빈 생성시 데이터베이스에 연결합니다. 
	반드시 필요한 파라미터를 속성으로 설정하고, 해당 datasource를 빈으로 등록합니다. -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- 생성된 dataSource 빈을 memberDAO 빈에 주입합니다. -->
	<bean id="memberDAO" class="com.ezen.member.dao.MemberDAOImpl">
		<property name="dataSource" ref="dataSource" />
	</bean>

</beans>
